When would you want to use a remote repository rather than keeping all your work local?
If your project involves other contributors, it might be easier to have everybody access it at a site like GitHub, rather than passing URLs back and forth among everybody and wondering who is up to date.  Or even with just one contributor, it could be nice to have a remote site to keep the most up-to-date working version of a project for the public to see, while simultaneously working on changes in a local repository.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You might want to finish developing an idea locally from a given point of the remote master, without integrating whatever changes have since been made to the remote.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are repositories that stay within the remote location. Clones move to or stay in the local area.  Branches happen within one repository.  Forks can be used for taking a project in a new direction without changing the original project, or for developing the project in a parallel way, perhaps to be combined with the original project later.  Clones are used to work on a project in your local repository. Branches are used when the repository already exists locally and the user wants to explore in a different direction from the master thread, committing to the new branch without affecting the master until merging.

What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit is that you can develop the remote locally while someone else makes changes to it, and when you want to combine your efforts, there is a common starting point from which to assess what the new version should be.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would use emails with files attached.  I would have to keep notes on what I had changed, and potentially make a separate copy of the file with each update.  This would make complicated projects much harder.  On the other hand, simple projects on the scale of the recipe changes we made for this lesson would be easier.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
First off, if you wanted to pursue two directions at once, and you wanted input from others on both branches, I think you'd need to make the changes in separate branches. Especially if you suspected the branches would eventually grow quite long, and you'd need to keep them separate for awhile.  But the benefit of keeping the changes in master are that the merges are streamlined and the histories stay neater. I guess you'd want to use master branch when your exploration is more linear.